// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceXpert.Infrastructure.DbContexts;

#nullable disable

namespace ServiceXpert.Infrastructure.Migrations
{
    [DbContext(typeof(SxpDbContext))]
    [Migration("20250913075720_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.AspNetUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e45acefa-74b0-4f28-b81f-fbc02d9778b5"),
                            CreateDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FirstName = "Admin",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CommentId"), false);

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssuePriorityId")
                        .HasColumnType("int");

                    b.Property<int>("IssueStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("IssueId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IssueId"));

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.IssuePriority", b =>
                {
                    b.Property<int>("IssuePriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssuePriorityId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("IssuePriorityId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IssuePriorityId"));

                    b.ToTable("IssuePriorities", (string)null);

                    b.HasData(
                        new
                        {
                            IssuePriorityId = 1,
                            CreateDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Outage"
                        },
                        new
                        {
                            IssuePriorityId = 2,
                            CreateDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Critical"
                        },
                        new
                        {
                            IssuePriorityId = 3,
                            CreateDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "High"
                        },
                        new
                        {
                            IssuePriorityId = 4,
                            CreateDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Medium"
                        },
                        new
                        {
                            IssuePriorityId = 5,
                            CreateDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Low"
                        });
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.IssueStatus", b =>
                {
                    b.Property<int>("IssueStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueStatusId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("IssueStatusId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IssueStatusId"));

                    b.ToTable("IssueStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            IssueStatusId = 1,
                            CreateDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "New"
                        },
                        new
                        {
                            IssueStatusId = 2,
                            CreateDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "For Analysis"
                        },
                        new
                        {
                            IssueStatusId = 3,
                            CreateDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "In Progress"
                        },
                        new
                        {
                            IssueStatusId = 4,
                            CreateDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Resolved"
                        },
                        new
                        {
                            IssueStatusId = 5,
                            CreateDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyDate = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("ServiceXpert.Infrastructure.AuthModels.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b954289-7678-4bd1-a3a3-171eb48346b2"),
                            CreateDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("ServiceXpert.Infrastructure.AuthModels.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e45acefa-74b0-4f28-b81f-fbc02d9778b5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "CD774732-9643-4427-A745-B72B3EAB125D",
                            CreateDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "noemail@noemail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NOEMAIL@NOEMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8/ykwd1Q9T24ymPfU/+GTDJfzc81J27jOD+oMtfBQPHISby25dFCc9ZTbIvgVOUg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("ServiceXpert.Infrastructure.AuthModels.AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e45acefa-74b0-4f28-b81f-fbc02d9778b5"),
                            RoleId = new Guid("2b954289-7678-4bd1-a3a3-171eb48346b2"),
                            CreateDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreateUserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.AspNetUserProfile", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetUser", null)
                        .WithOne()
                        .HasForeignKey("ServiceXpert.Domain.Entities.AspNetUserProfile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ServiceXpert.Domain.Entities.Issue", null)
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.Issue", b =>
                {
                    b.HasOne("ServiceXpert.Domain.Entities.IssuePriority", "IssuePriority")
                        .WithOne()
                        .HasForeignKey("ServiceXpert.Domain.Entities.Issue", "IssuePriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiceXpert.Domain.Entities.IssueStatus", "IssueStatus")
                        .WithOne()
                        .HasForeignKey("ServiceXpert.Domain.Entities.Issue", "IssueStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssuePriority");

                    b.Navigation("IssueStatus");
                });

            modelBuilder.Entity("ServiceXpert.Infrastructure.AuthModels.AspNetUserRole", b =>
                {
                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceXpert.Infrastructure.AuthModels.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceXpert.Domain.Entities.Issue", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
